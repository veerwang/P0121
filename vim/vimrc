"                      The file is seted for the edit programme!                               "
"											       "
"                                                                            Version:   1.01   "
"											       "

"Hot key define by me
let mapleader=","
nmap <leader>study :edit ~/study/study.txt <CR>
nmap <leader>w :w!<CR>

"just show content in single line
set nowrap

" plugin manage segment
filetype off                   " required!
set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

" let Vundle manage Vundle
" required! 
Bundle 'gmarik/vundle'

" My Bundles here:
"
" original repos on github
Bundle 'tpope/vim-fugitive'
Bundle 'tpope/vim-rails.git'

Bundle 'vim-scripts/c.vim.git'
"Bundle 'blak3mill3r/c.vim.git'

Bundle 'vim-scripts/SeeTab.git'
Bundle 'vim-scripts/a.vim.git'
Bundle 'vim-scripts/gtags.vim.git'

Bundle 'xolox/vim-session.git'
Bundle 'xolox/vim-misc.git'

Bundle 'vim-scripts/bufexplorer.zip.git'
Bundle 'aldmeris'
"Bundle 'rygwdn/vim-conque.git'
Bundle 'rosenfeld/conque-term'

Bundle 'echofunc.vim'
Bundle 'vtreeexplorer'
Bundle 'vim-scripts/bash-support.vim.git'
Bundle 'esukram/autocomplpop.vim.git'
Bundle 'calendar.vim--Matsumoto'
Bundle 'OmniCppComplete'
Bundle 'Align'
Bundle 'cscope_macros.vim'
Bundle 'netrw.vim'
Bundle 'browser.vim'
Bundle 'sjl/gundo.vim'
Bundle 'terryma/vim-multiple-cursors'
Bundle 'Shell.vim'
Bundle 'pythoncomplete'
Bundle 'Tagbar'
Bundle 'ctrlp.vim'
Bundle 'neocomplcache'
"Bundle 'snipMate'
Bundle 'xptemplate'
Bundle 'Syntastic'
Bundle 'Lokaltog/vim-powerline'
"Bundle 'scrooloose/nerdtree.git'
Bundle 'The-NERD-tree'
Bundle 'EasyMotion'

"Bundle 'autoload_cscope.vim'

"color
Bundle 'simple-dark'
Bundle 'tpope/vim-vividchalk.git'
Bundle 'summerfruit256.vim'
Bundle 'inkpot'
Bundle 'Gummybears'
Bundle 'peaksea'
Bundle 'softbluev2'
Bundle 'lemon256'
Bundle 'Solarized'
Bundle 'light2011'
Bundle 'Lucius'

"
" non github repos
Bundle 'git://gist.github.com/422503.git'

"
" ...

filetype plugin indent on     " required!

nmap <leader>pll :BundleList <cr>
nmap <leader>pls :BundleSearch <cr>
nmap <leader>pli :BundleInstall <cr>
nmap <leader>plu :BundleInstall! <cr>
nmap <leader>plr :BundleClean <cr>

"
"  Brief help
" :BundleList          - list configured bundles
" :BundleInstall(!)    - install(update) bundles
" :BundleSearch(!) foo - search(or refresh cache
" first) for foo
" :BundleClean(!)      - confirm(or auto-approve)
" removal of unused bundles
"
" see :h vundle for more details or wiki for FAQ
" NOTE: comments after Bundle command are not
" allowed..
"

" color scheme manage segment
set t_Co=256

"set the backcolor type
set background=light

"colo ron
"colo simple-dark
"colo vividchalk 
"colo inkpot 
"colo summerfruit256
"colo gummybears
"colo peaksea
"colo softbluev2
"colo lemon256
colo light2011
"colo lucius

"set the line number 
set nu

"set the syntax on
syntax on

"auto style in C program
set cin

"do not backup file when over-written file
set nobackup

"set short message cut 
set shortmess=atl

"set the tags file name
set tags=tags;

" turn the wild menu
set wildmenu

" turn off the error bell
set noerrorbells

set ignorecase

set autochdir

"set search result high light 
set hlsearch

"set ruler
set ruler

set so=7

"set no compatible mode of VIM
set nocompatible

"Set to auto read when a file is changed from the outside
set autoread

"Have the mouse enabled all the time:
set mouse=a

filetype plugin indent on
   
set nocp

"match {} setting
set showmatch
set matchtime=5

"set cursor line high light
"set cursorline

"set file code-write sets
set encoding=utf-8
set fileencoding=utf-8
set fencs=utf-8,gb18030,gbk,gb2312,cp936

"Set the lines of history
set history=400 

"Omnicomplete configrature
let OmniCpp_GlobalScopeSearch=1
let OmniCpp_NamespaceSearch=1
let OmniCpp_DisplayMode=1
let OmniCpp_ShowPrototypelnAbbr=1
let OmniCpp_ShowAccess=1
let OmniCpp_MayCompleteDot=1
let OmniCpp_MayCompleteArrow=1
let OmniCpp_MayCompleteScope=1

"set linestatus variables
function! CurDir()
let curdir = substitute(getcwd(), '/home/kevin/', "~/", "g")
return curdir
endfunction

"highlight statusline color setting
function! StatusFun()
set ls=2
set statusline=
set statusline+=%1*\ type:%Y\ 
set statusline+=%2*\ format:%{&ff}:%{&fenc!=''?&fenc:&enc}\ 
set statusline+=%3*\ time:\ 
set statusline+=%{strftime(\"%Y-%m-%d\ %H:%M\")}\ 
set statusline+=%4*\ %03l,%03c\ +\ %L(%p%%)\ 
set statusline+=%5*\ %M%n%r%h%w\ %F\ 
hi User1 term=bold ctermfg=Black ctermbg=Yellow
hi User2 term=bold ctermfg=Yellow ctermbg=Black
hi User3 term=bold ctermfg=Black ctermbg=Yellow
hi User4 term=bold ctermfg=Yellow ctermbg=black
hi User5 term=bold ctermfg=Black ctermbg=Yellow
endfunction

"call StatusFun()

map time :!date<CR>

" Enable/Disable SyntasticToggleMode
let g:syntastic_mode_map = { 'mode': 'passive',
		       \ 'active_filetypes': [],
		       \ 'passive_filetypes': [] }
map syn :SyntasticToggleMode<CR>

"tagbar
"nmap <Leader>tb :TagbarToggle<CR>
map tb :TagbarToggle<CR>
let g:tagbar_ctags_bin='/usr/bin/ctags'
let g:tagbar_width=30
autocmd BufReadPost *.cpp,*.c,*.h,*.hpp,*.cc,*.cxx call tagbar#autoopen()

"Edit my confirature file
nmap <leader>c :edit ~/.vimrc <cr>
autocmd! bufwritepost .vimrc source ~/.vimrc
nmap <leader>g :edit ~/.gvimrc <cr>
autocmd! bufwritepost .gvimrc source ~/.gvimrc

"Edit my vim script
nmap <leader>mc :edit ~/workcopy/P0121/python/makescript.vim <cr>

"open help documentaion
nmap <leader>h :tab help<cr>

"show the version information
nmap <leader>v :version<cr>

"close the table
"Ctrl-v Ctrl-c input the ^C
nmap  :close<cr>
nmap  :qall<cr>

"Tab operation
nmap <leader>tn :tabnew<cr>
nmap <leader>tm :tabmove<cr>
nmap <leader>tc :tabclose<cr>
nmap <leader>te :tabedit

" Ctrrlp Configrature
let g:ctrlp_custom_ignore = '\.git$\|\.hg$\|\.svn$\|.rvm$'
let g:ctrlp_working_path_mode=0
let g:ctrlp_match_window_bottom=1
let g:ctrlp_max_height=20
let g:ctrlp_match_window_reversed=0
let g:ctrlp_mruf_max=500
let g:ctrlp_follow_symlinks=1
let g:ctrlp_map = '<c-p>'

map <F4> :!ctags -R .<cr>
map <F5> :!find `pwd` -name "*.h" -o -name "*.cpp" -o -name "*.c" > cscope.files <cr> :!cscope -Rqbk -i cscope.files <cr>
map <F6> :!ctags -R --c++-kinds=+p --fields=+iaSl --extra=+q .<cr>

" Favorite filetype
set ffs=unix,dos,mac
nmap <leader>fd :se ff=dos<cr>
nmap <leader>fu :se ff=unix<cr>

" VSTreeExplore used variables 
nmap <leader>ve :VSTreeExplore<cr>
let g:treeExplDirSort=1
let g:treeExplWinSize=30
let g:treeExplVertical=1
let g:treeExplNoList=1
let g:treeExplmodifiable=0
let g:treeExplIndent=2

" Quickfix window
nmap <leader>co :cope<cr>
nmap <leader>clo :ccl<cr>
nmap <leader>cn :cn<cr>
nmap <leader>cp :cp<cr>

" neocomplcache configrature
let g:neocomplcache_enable_at_startup = 1

"adjust window width
nmap <leader><leader>n :vertical res -5 <cr>
nmap <leader><leader>m :vertical res +5 <cr>
nmap <leader><leader>p :res -5 <cr>
nmap <leader><leader>l :res +5 <cr>

" fugitive key map
nmap <leader>gs :Gstatus<cr>

" BufExplorer
let g:bufExplorerDefaultHelp=0
let g:bufExplorerShowRelativePath=1
let g:bufExplorerSplitUp = 1
let g:bufExplorerVertical = 1
let g:bufExplorerSplitVertSize = 30 
let g:bufExplorerShowTabBuffer=1

" Let g:bufExplorerSplitBelow=1
nmap <leader>o :BufExplorer<cr>

" binary file edit 
nmap <leader>eb :%!xxd<cr>
nmap <leader>rb :%!xxd -r<cr>

" Shell bash plugin
let g:ConqueTerm_CodePage=0
let g:ConqueTerm_FastMode=0
nmap <leader>sh :ConqueTermTab bash<cr>

"run shell command and show the result on screen
nmap <leader>s :r!
let g:PROMPT="$"

" Show undo tree
nmap <leader>u :GundoShow<CR>

" paste the value
" map P "0p<CR>

" for Align plugin
let g:BASH_MapLeader  = ','

"For auto rename plugin
nmap <leader>ren :Renamer <cr>
nmap <leader>ree :Ren <cr>

"visit the vim websize
nmap <leader>ftpvim :e ftp://anonymous@ftp.vim.org/pub/vim/patches/7.3/ <cr>

"browse current directory
let g:netrw_preview   = 1
let g:netrw_liststyle = 3
let g:netrw_winsize   = 60
nmap <silent> <leader>fe :Sexplore!<cr>

set tabline=%!MyTabLine()
function! MyTabLine()
  let s = ''
  for i in range(tabpagenr('$'))
    " select the highlighting
    if i + 1 == tabpagenr()
      let s .= '%#TabLineSel#'
    else
      let s .= '%#TabLine#'
    endif

    " set the tab page number (for mouse clicks)
    let s .= '%' . (i + 1) . 'T'

    " the label is made by MyTabLabel()
    let s .= (i + 1) . ' %{MyTabLabel(' . (i + 1) . ')} ' . '%M' . ' '
  endfor

  " after the last tab fill with TabLineFill and reset tab page nr
  let s .= '%#TabLineFill#%T'

  " right-align the label to close the current tab page
  if tabpagenr('$') > 1
    let s .= '%=%#TabLine#%999Xclose'
  endif
  return s
endfunction

function! MyTabLabel(n)
  let buflist = tabpagebuflist(a:n)
  let winnr = tabpagewinnr(a:n)
  return bufname( buflist[winnr - 1])
endfunction

" Alt-w write the file
" Ctrl-v Alt-w: to input ^[w charactor
nmap w :w <cr>

" for ACP plugin
nmap <leader>acpe :AcpEnable <cr>
nmap <leader>acpd :AcpDisable <cr>

" Default mapping
let g:multi_cursor_next_key='<C-n>'
let g:multi_cursor_prev_key='<C-p>'
let g:multi_cursor_skip_key='<C-x>'
let g:multi_cursor_quit_key='<Esc>'

let $MYEMAIL="kevin.wang2004@hotmail.com"

let g:Powerline_symbols = 'fancy'
let g:Powerline_stl_path_style = 'full'

" NERDTree configration
"autocmd VimEnter * NERDTree
"nmap <leader>ne :NERDTreeToggle<cr>
map <F4> :NERDTreeToggle<cr>
let NERDTreeWinPos="left"
let NERDTreeShowBookmarks=1

let g:wfw = 1

" Save/load session function
let g:session_directory = '~/.vim/sessions/'
let g:session_autoload = 'yes'
let g:session_autosave = 'yes'
set sessionoptions=blank,curdir,winpos,folds,tabpages,winsize,buffers,help,folds,resize
autocmd vimLeave * mks! $HOME/.vim/sessions/default.vim
