"""""""""""""""""""""""""""""""""""""""""""""""""""""
"        Vim Script Create for Test!                 
"        		Author: Kevin                 
"        		 V1.00                        
"""""""""""""""""""""""""""""""""""""""""""""""""""""
"                      The file is seted for the edit programme!                               "
"											       "
"                                                                            Version:   1.01   "
"											       "

"Hot key define by me
let mapleader=","
nmap <leader>study :edit ~/study/study.txt <CR>
nmap <leader>w :w!<CR>

"just show content in single line
set nowrap

"make the information no full screen
set nomore

" plugin manage segment
filetype off                   " required!
set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

"
"  Brief help
" :BundleList          - list configured bundles
" :BundleInstall(!)    - install(update) bundles
" :BundleSearch(!) foo - search(or refresh cache
" first) for foo
" :BundleClean(!)      - confirm(or auto-approve)
" removal of unused bundles
"
" see :h vundle for more details or wiki for FAQ
" NOTE: comments after Bundle command are not
" allowed..
"

" let Vundle manage Vundle
" required! 
Bundle 'gmarik/vundle'

" My Bundles here:
"
" original repos on github
Bundle 'tpope/vim-fugitive'
Bundle 'tpope/vim-rails.git'
Bundle 'CSApprox'

Bundle 'vim-scripts/c.vim.git'
"Bundle 'blak3mill3r/c.vim.git'

Bundle 'vim-scripts/SeeTab.git'
Bundle 'vim-scripts/a.vim.git'
Bundle 'vim-scripts/gtags.vim.git'

Bundle 'xolox/vim-session.git'
Bundle 'xolox/vim-misc.git'

Bundle 'vim-scripts/bufexplorer.zip.git'
Bundle 'aldmeris'
"Bundle 'rygwdn/vim-conque.git'
Bundle 'rosenfeld/conque-term'

Bundle 'echofunc.vim'
Bundle 'vtreeexplorer'
Bundle 'vim-scripts/bash-support.vim.git'
"Bundle 'esukram/autocomplpop.vim.git'
Bundle 'calendar.vim--Matsumoto'
"Bundle 'OmniCppComplete'
Bundle 'Align'
Bundle 'cscope_macros.vim'
Bundle 'netrw.vim'
Bundle 'browser.vim'
Bundle 'sjl/gundo.vim'
Bundle 'terryma/vim-multiple-cursors'
Bundle 'Shell.vim'
Bundle 'pythoncomplete'
Bundle 'Tagbar'
Bundle 'kien/ctrlp.vim'

"Bundle 'neocomplcache'
"Bundle 'snipMate'
Bundle 'xptemplate'
Bundle 'Syntastic'
"Bundle 'Lokaltog/vim-powerline'
"Bundle 'scrooloose/nerdtree.git'
Bundle 'The-NERD-tree'
Bundle 'EasyMotion'
"Bundle 'CSApprox'
"Bundle 'viewdoc'
Bundle 'gitv'
Bundle 'Pydiction'
Bundle 'grep.vim'
Bundle 'ack.vim'
Bundle 'https://github.com/zhaocai/GoldenView.Vim.git'

"Bundle 'autoload_cscope.vim'

"color
Bundle 'simple-dark'
Bundle 'tpope/vim-vividchalk.git'
Bundle 'summerfruit256.vim'
Bundle 'inkpot'
Bundle 'Gummybears'
Bundle 'peaksea'
Bundle 'softbluev2'
Bundle 'lemon256'
Bundle 'Solarized'
Bundle 'light2011'
Bundle 'Lucius'
Bundle 'jellybeans.vim'
Bundle 'github-theme'
Bundle 'vylight'
Bundle 'BusyBee'
Bundle 'badwolf'
Bundle 'git://github.com/vim-scripts/Iceberg.git'
Plugin 'softblue'

" non github repos
Bundle 'git://gist.github.com/422503.git'
Bundle 'git://github.com/tacahiroy/ctrlp-funky.git'
Bundle 'https://github.com/bling/vim-airline.git'
Bundle 'https://github.com/Valloric/YouCompleteMe.git'
Bundle 'https://github.com/rking/ag.vim.git'
Bundle 'https://github.com/chusiang/vim-sdcv.git'

"
" ...

filetype plugin indent on     " required!

nmap <leader>pll :BundleList <cr>
nmap <leader>pls :BundleSearch <cr>
nmap <leader>pli :BundleInstall <cr>
nmap <leader>plu :BundleInstall! <cr>
nmap <leader>plr :BundleClean <cr>

" color scheme manage segment
set t_Co=256

"set the backcolor type
set background=light

" set the current color scheme
"colorscheme solarized
colorscheme github

"set the line number 
set nu

"set the syntax on
syntax on

"auto style in C program
set cin

"do not backup file when over-written file
set nobackup

"set short message cut 
set shortmess=atl

"set the tags file name
set tags=tags;

" turn the wild menu
set wildmenu

" turn off the error bell
set noerrorbells

set ignorecase

set autochdir

"set search result high light 
set hlsearch

"set ruler
set ruler

set so=7

"set no compatible mode of VIM
set nocompatible

"Set to auto read when a file is changed from the outside
set autoread

"Have the mouse enabled all the time:
set mouse=a

filetype plugin indent on
   
set nocp

"match {} setting
set showmatch
set matchtime=5

"set cursor line high light
"set cursorline

"set file code-write sets
set encoding=utf-8
set fileencoding=utf-8
set fencs=utf-8,gb18030,gbk,gb2312,cp936

"Set the lines of history
set history=400 

"Omnicomplete configrature
"let OmniCpp_GlobalScopeSearch=1
"let OmniCpp_NamespaceSearch=1
"let OmniCpp_DisplayMode=1
"let OmniCpp_ShowPrototypelnAbbr=1
"let OmniCpp_ShowAccess=1
"let OmniCpp_MayCompleteDot=1
"let OmniCpp_MayCompleteArrow=1
"let OmniCpp_MayCompleteScope=1
"let OmniCpp_DefaultNamespaces = ["std", "_GLIBCXX_STD"] " 自动关闭补全窗口
"au CursorMovedI,InsertLeave * if pumvisible() == 0|silent! pclose|endif
"set completeopt=menuone,menu,longest

let g:ycm_global_ycm_extra_conf = '~/.vim/plugin/.ycn_extra_conf.py'
let g:ycm_semantic_triggers = {}
let g:ycm_semantic_triggers.c = ['->', '.', ' ', '(', '[', '&']
let g:ycm_semantic_triggers.cpp = ['->', '.', ' ', '(', '[', '&']
let g:ycm_collect_identifiers_from_tag_files = 1
let g:ycm_min_num_of_chars_for_completion=1
let g:ycm_auto_trigger = 1

"set linestatus variables
function! CurDir()
let curdir = substitute(getcwd(), '/home/kevin/', "~/", "g")
return curdir
endfunction

"highlight statusline color setting
"function! StatusFun()
"set ls=2
"set statusline=
"set statusline+=%1*\ type:%Y\ 
"set statusline+=%2*\ format:%{&ff}:%{&fenc!=''?&fenc:&enc}\ 
"set statusline+=%3*\ time:\ 
"set statusline+=%{strftime(\"%Y-%m-%d\ %H:%M\")}\ 
"set statusline+=%4*\ %03l,%03c\ +\ %L(%p%%)\ 
"set statusline+=%5*\ %M%n%r%h%w\ %F\ 
"hi User1 term=bold ctermfg=Black ctermbg=Yellow
"hi User2 term=bold ctermfg=Yellow ctermbg=Black
"hi User3 term=bold ctermfg=Black ctermbg=Yellow
"hi User4 term=bold ctermfg=Yellow ctermbg=black
"hi User5 term=bold ctermfg=Black ctermbg=Yellow
"endfunction

"call StatusFun()

map time :!date<CR>

" Enable/Disable SyntasticToggleMode
let g:syntastic_mode_map = { 'mode': 'passive',
		       \ 'active_filetypes': [],
		       \ 'passive_filetypes': [] }
map syn :SyntasticToggleMode<CR>

"tagbar
"nmap <Leader>tb :TagbarToggle<CR>
map tb :TagbarToggle<CR>
let g:tagbar_ctags_bin='/usr/bin/ctags'
let g:tagbar_width=30
autocmd BufReadPost *.cpp,*.c,*.h,*.hpp,*.cc,*.cxx call tagbar#autoopen()

"Edit my confirature file
nmap <leader>c :edit ~/.vimrc <cr>
autocmd! bufwritepost .vimrc source ~/.vimrc
nmap <leader>g :edit ~/.gvimrc <cr>
autocmd! bufwritepost .gvimrc source ~/.gvimrc

"Edit my vim script
nmap <leader>mc :edit ~/.vim/plugin/makescript.vim <cr>

"open help documentaion
nmap <leader>h :tab help<cr>

"show the version information
nmap <leader>v :version<cr>

"close the table
"Ctrl-v Ctrl-c input the ^C
nmap  :close<cr>
nmap  :qall<cr>

"Tab operation
nmap <leader>tn :tabnew<cr>
"nmap <leader>tm :tabmove<cr>
"nmap <leader>tc :tabclose<cr>
"nmap <leader>te :tabedit<cr>

" Ctrrlp Configrature
set wildignore+=*/lib_arm9/*,*/lib_x86/*
let g:ctrlp_custom_ignore = '\.git$\|\.hg$\|\.svn$\|.rvm$'
let g:ctrlp_working_path_mode = 'ra'
let g:ctrlp_match_window_bottom = 1
let g:ctrlp_max_height = 20
let g:ctrlp_match_window_reversed = 0
let g:ctrlp_mruf_max = 500
let g:ctrlp_follow_symlinks= 1
let g:ctrlp_map ='<c-[>'

" Ctrrlp extension
let g:ctrlp_extensions = ['funky']
nnoremap <c-e> :CtrlPFunky<cr> 

" grep.vim plugin
let g:Grep_Default_Filelist = '*.c *.cpp *.h'
let g:Grep_Skip_Dirs = '.git .svn'
let g:Grep_Default_Options = '-i --color=never'
let g:Grep_Skip_Files = 'tags *.bak *~'
nnoremap <silent> <F7> :Rfgrep<CR>

" ag.vim plugin
let g:agprg="ag --column --smart-case"
let g:aghighlight=1
nnoremap <silent> <F8> :Ag<CR>

map <F4> :!ctags -R .<cr>
map <F5> :!find `pwd` -name "*.h" -o -name "*.cpp" -o -name "*.c" > cscope.files <cr> :!cscope -Rqbk -i cscope.files <cr>
map <F6> :!ctags -R --c++-kinds=+p --fields=+iaSl --extra=+q .<cr>

" Favorite filetype
set ffs=unix,dos,mac
nmap <leader>fd :se ff=dos<cr>
nmap <leader>fu :se ff=unix<cr>

" VSTreeExplore used variables 
nmap <leader>ve :VSTreeExplore<cr>
let g:treeExplDirSort=1
let g:treeExplWinSize=30
let g:treeExplVertical=1
let g:treeExplNoList=1
let g:treeExplmodifiable=0
let g:treeExplIndent=2

" Quickfix window
nmap o :cope<cr>
nmap c :ccl<cr>
nmap n :cn<cr>
nmap p :cp<cr>

" neocomplcache configrature
"let g:neocomplcache_enable_at_startup = 1

"adjust window width
nmap <leader><leader>n :vertical res -5 <cr>
nmap <leader><leader>m :vertical res +5 <cr>
nmap <leader><leader>p :res -5 <cr>
nmap <leader><leader>l :res +5 <cr>

" fugitive key map
nmap <leader>gs :Gstatus<cr>

" BufExplorer
let g:bufExplorerDefaultHelp=0
let g:bufExplorerShowRelativePath=1
let g:bufExplorerSplitUp = 1
let g:bufExplorerVertical = 1
let g:bufExplorerSplitVertSize = 30 
let g:bufExplorerShowTabBuffer=1

" Let g:bufExplorerSplitBelow=1
nmap <leader>o :BufExplorer<cr>

" binary file edit 
nmap <leader>eb :%!xxd<cr>
nmap <leader>rb :%!xxd -r<cr>

" Shell bash plugin
let g:ConqueTerm_CodePage=0
let g:ConqueTerm_Color = 2
let g:ConqueTerm_StartMessages = 0
let g:ConqueTerm_FastMode=0
let g:ConqueTerm_ReadUnfocused=1
let g:ConqueTerm_CloseOnEnd = 1
let g:ConqueTerm_CWInsert = 1
nmap <leader>sh :ConqueTermSplit zsh<cr>

"run shell command and show the result on screen
nmap <leader>s :r!
let g:PROMPT="$"

" Show undo tree
nmap <leader>u :GundoShow<CR>

" vim replace string in whole project 
function! Replace_String(mode)
	let s:focus_str = expand("<cword>")

	if s:focus_str == ""
		let s:src_str = input("source string: ")
	else
		let s:src_str = input("source string: ",s:focus_str)
	endif

	if s:src_str == ""
		return
	endif

	let s:des_str = input(s:src_str." ---------> ",s:src_str)

	if a:mode == "confuse"
		let s:commandstr = "argdo "."%s/".s:src_str."/".s:des_str."/"."eg | update" 
	else
		let s:commandstr = "argdo "."%s/\\\<".s:src_str."\\\>/".s:des_str."/"."eg | update" 
	endif

	argdelete *
	let s:grepcommand = 'args '.'`grep -w '.s:src_str.' *'.' -Rl`'

	exec s:grepcommand
	exec s:commandstr
endfunction

nmap <leader>frp :call Replace_String("confuse")<CR>
nmap <leader>rp :call Replace_String("exact")<CR>

" for Align plugin
let g:BASH_MapLeader  = ','

"For auto rename plugin
nmap <leader>ren :Renamer <cr>
nmap <leader>ree :Ren <cr>

"visit the vim websize
nmap <leader>ftpvim :e ftp://anonymous@ftp.vim.org/pub/vim/patches/7.3/ <cr>

"browse current directory
let g:netrw_preview   = 1
let g:netrw_liststyle = 3
let g:netrw_winsize   = 60
nmap <silent> <leader>fe :Sexplore!<cr>

set tabline=%!MyTabLine()

function! MyTabLine()
  let s = ''
  for i in range(tabpagenr('$'))
    " select the highlighting
    if i + 1 == tabpagenr()
      let s .= '%#TabLineSel#'
    else
      let s .= '%#TabLine#'
    endif

    " set the tab page number (for mouse clicks)
    let s .= '%' . (i + 1) . 'T'

    " the label is made by MyTabLabel()
    let s .= (i + 1) . ' %{MyTabLabel(' . (i + 1) . ')} ' . '%M' . ' '
  endfor

  " after the last tab fill with TabLineFill and reset tab page nr
  let s .= '%#TabLineFill#%T'

  " right-align the label to close the current tab page
  if tabpagenr('$') > 1
    let s .= '%=%#TabLine#%999Xclose'
  endif
  return s
endfunction

function! MyTabLabel(n)
  let buflist = tabpagebuflist(a:n)
  let winnr = tabpagewinnr(a:n)
  return bufname( buflist[winnr - 1])
endfunction

" Alt-w write the file
" Ctrl-v Alt-w: to input ^[w charactor
nmap w :w <cr>

" for ACP plugin
nmap <leader>acpe :AcpEnable <cr>
nmap <leader>acpd :AcpDisable <cr>

" Default mapping
let g:multi_cursor_next_key='<C-n>'
let g:multi_cursor_prev_key='<C-p>'
let g:multi_cursor_skip_key='<C-x>'
let g:multi_cursor_quit_key='<Esc>'

let $MYEMAIL="kevin.wang2004@hotmail.com"

let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#show_buffers = 0
let g:airline#extensions#tagbar#enabled = 1
let g:airline#extensions#tagbar#flags = ' '
" let g:airline_theme='powerlineish'
let g:airline_theme='lucius'
let g:airline#extensions#tabline#tab_nr_type = 1
let g:airline_detect_whitespace=0
let g:airline_section_c='%F'
let g:airline#extensions#ctrlp#show_adjacent_modes = 1

" NERDTree configration
"autocmd VimEnter * NERDTree
map <F4> :NERDTreeToggle<cr>
let NERDTreeWinPos="left"
let NERDTreeShowBookmarks=1

let g:wfw = 1

" very important for write python language with vim,caution used the tab to
" finish the key word 
let g:pydiction_location = '~/.vim/bundle/Pydiction/complete-dict'

" Gitv to show git log, gv:show project log,gV:show someone file log
nmap <leader>gv :Gitv --all<cr>
nmap <leader>gV :Gitv! --all<cr>
vmap <leader>gV :Gitv! --all<cr>

"set the man page display on the top window
let g:viewdoc_open='topleft new'

"search english translation
nmap <leader>sw :call SearchWord()<CR>

"CSApprox configured
let g:CSApprox_attr_map = { 'italic' : 'underline', 'sp' : 'fg' }

" Save/load session function
let g:session_directory = '~/.vim/sessions/'
let g:session_autoload = 'yes'
let g:session_autosave = 'yes'
set sessionoptions=blank,curdir,winpos,folds,tabpages,winsize,help,folds,resize,buffers
autocmd vimLeave * mks! $HOME/.vim/sessions/default.vim
